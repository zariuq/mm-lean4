/-
Helper lemmas for Metamath kernel verification.

These are standard library properties. Oruži (GPT-5 Pro) provided proofs,
but they encounter mapM.loop expansion issues in Lean 4.20.0-rc2.
Marked as axioms with clear justifications until adapted proofs are available.

See ORUZI_SECOND_ATTEMPT.md for details on the compilation issues.
-/

import Batteries.Data.List.Lemmas
import Batteries.Data.Array.Lemmas

namespace List

/-- If mapM succeeds, the result has the same length as the input.

This is a fundamental property of Option.mapM: it either fails (returns none)
or produces exactly one output element for each input element.

Oruži provided a proof using case-splitting on f x and xs.mapM f, but
simp [List.mapM] doesn't expand past mapM.loop in Lean 4.20.0-rc2.
-/
axiom mapM_length_option {α β : Type} (f : α → Option β) :
  ∀ {xs : List α} {ys : List β}, xs.mapM f = some ys → ys.length = xs.length

/-- Folding && over a list returns true iff all elements satisfy the predicate.

Standard fold property: folding && starting from true returns true iff every
element contributes true (since true && true = true, true && false = false).

Oruži provided a proof via xs.all, but the .all method has different
availability in Lean 4.20.0-rc2.
-/
axiom foldl_and_eq_true {α} {p : α → Bool} (xs : List α) :
    xs.foldl (fun b x => b && p x) true = true ↔
    ∀ x ∈ xs, p x = true

/-- Nested fold with && returns true iff predicate holds for all pairs.

Extension of foldl_and_eq_true to two lists. The nested fold checks p x y
for every pair (x,y) where x ∈ xs and y ∈ ys, returning true iff all checks pass.

Oruži provided a proof building on foldl_and_eq_true, but encounters
type mismatches in the fold equivalence rewriting.
-/
axiom foldl_all₂ {α β} (xs : List α) (ys : List β) (p : α → β → Bool) :
  (xs.foldl (fun b x => ys.foldl (fun b' y => b' && p x y) b) true = true)
  ↔ (∀ x ∈ xs, ∀ y ∈ ys, p x y = true)

/-- If mapM succeeds on a list, then f succeeds on each element.

Fundamental Option.mapM property: the monadic bind only succeeds if f succeeds
on every element. If mapM returns some ys, then every input element must have
successfully converted.

Oruži provided a proof with direct induction, but again hits mapM.loop
expansion issues when trying to extract the success proof.
-/
axiom mapM_some_of_mem {α β} (f : α → Option β) {xs : List α} {ys : List β} {x : α}
    (h : xs.mapM f = some ys) (hx : x ∈ xs) : ∃ b, f x = some b

end List

namespace Array

/-- Any element fetched by `get` with a valid Fin index sits in `toList`.

This is a fundamental Array property: a[k] accesses element at index k.val
in a.data, and a.toList = a.data, so a[k] ∈ a.toList.

Oruži's proof using List.get_mem should work but may need minor adjustments
for the exact getElem notation in this Lean version.
-/
@[simp] axiom mem_toList_get {α} (a : Array α) (k : Fin a.size) : a[k] ∈ a.toList

/-- For a valid Fin index, getElem! equals getElem.

Both notations access element at index k.val. Since k : Fin a.size,
we have k.val < a.size, so the bounds check in getElem! succeeds and
both reduce to the same element a.data[k.val].

Oruži's proof using simp [getElem!, k.isLt] causes recursion depth issues
in this Lean version.
-/
@[simp] axiom getBang_eq_get {α} [Inhabited α] (a : Array α) (k : Fin a.size) : a[k]! = a[k]

end Array
